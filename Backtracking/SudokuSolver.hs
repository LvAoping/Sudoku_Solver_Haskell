-- \/\/\/ DO NOT MODIFY THE FOLLOWING LINES \/\/\/
module SudokuSolver(Board, Solutions(..), author, nickname, numSolutions) where
import Sudoku(Board, Solutions(..))

import Data.List (delete, find)
import Control.Monad (guard)
import Data.Maybe (isNothing, fromJust)
import Control.Applicative ((<|>))

-- /\/\/\ DO NOT MODIFY THE PRECEDING LINES /\/\/\

import TestBoards (
    uniques, ambiguouss, invalids,
    uniqueBoard1, uniqueBoard2, uniqueBoard3, uniqueBoard4, uniqueBoard5,
    uniqueBoard6, uniqueBoard7, uniqueBoard8, uniqueBoard9,
    uniqueBoardA, uniqueBoardB, uniqueBoardC,
    ambiguousBoard1, ambiguousBoard2, ambiguousBoard3, ambiguousBoard4, ambiguousBoard5,
    ambiguousBoard6, ambiguousBoard7, ambiguousBoard8, ambiguousBoard9,
    ambiguousBoardA, ambiguousBoardB, ambiguousBoardC,
    invalidBoard1, invalidBoard2, invalidBoard3, invalidBoard4, invalidBoard5,
    invalidBoard6, invalidBoard7, invalidBoard8, invalidBoard9,
    invalidBoardA, invalidBoardB, invalidBoardC)


{- (Remember to provide a brief (about 100-500 words) description of
   your implementation.)
 -}

author :: String
author = "Aoping Lyu"  -- replace `undefined' with your first and last name

nickname :: String
nickname = "SudokuOuSama" -- replace `undefined' with a nickname for your solver

{- (Remember to provide a complete function specification.)
 -}
-- numSolutions :: Board -> Solutions
-- numSolutions = undefined -- remove `= undefined' and define your function here
-- Define the size of the Sudoku board


n :: Board -> Int
n board = length board

-- Define the size of the subgrid
subGridSize :: Board -> Int
subGridSize board = round (sqrt (fromIntegral (n board))) 

-- Get the values in a row
getRow :: Board -> Int -> [Int]
getRow board row = board !! row

-- Get the values in a column
getCol :: Board -> Int -> [Int]
getCol board col = [board !! r !! col | r <- [0..n board - 1]]

-- Get the values in a subgrid
getSubGrid :: Board -> Int -> Int -> [Int]
getSubGrid board row col =
  [ board !! r !! c
  | r <- [startRow..startRow + subGridSize board - 1]
  , c <- [startCol..startCol + subGridSize board - 1]
  ]
  where
    startRow = (row `div` subGridSize board) * subGridSize board
    startCol = (col `div` subGridSize board) * subGridSize board

-- Get all possible values for a given cell
possibleValues :: Board -> Int -> Int -> [Int]
possibleValues board row col
  | board !! row !! col /= 0 = []  -- If the cell is already filled, no possibilities
  | otherwise = filter (`notElem` takenValues) [1..n board]
  where
    takenValues = getRow board row ++ getCol board col ++ getSubGrid board row col

-- Place a value in a cell
placeValue :: Board -> Int -> Int -> Int -> Board
placeValue board row col val =
  [ [ if r == row && c == col then val else board !! r !! c
    | c <- [0..n board-1] ]
  | r <- [0..n board-1] ]

-- Solve the Sudoku puzzle using constraint propagation and backtracking
solveSudoku :: Board -> Maybe Board
solveSudoku board
  | isSolved board = Just board
  | otherwise = do
      let emptyCells = [(r, c) | r <- [0..n board-1], c <- [0..n board-1], board !! r !! c == 0]
      let (row, col) = head emptyCells  -- Pick the first empty cell
      let values = possibleValues board row col
      -- Try each possible value and recursively solve
      foldr (\val acc -> acc <|> solveSudoku (placeValue board row col val)) Nothing values

-- Check if the board is solved (i.e., no empty cells)
isSolved :: Board -> Bool
isSolved = all (notElem 0)

-- Count the number of solutions for a given board
-- Count the number of solutions for a given board
countSolutions :: Board -> Int -> Int
countSolutions board acc
  | acc > 1 = acc  -- Stop early if more than 1 solution is found
  | isSolved board = acc + 1
  | otherwise = do
      let emptyCells = [(r, c) | r <- [0..n board-1], c <- [0..n board-1], board !! r !! c == 0]
      let (row, col) = head emptyCells
      let values = possibleValues board row col
      -- Try each possible value and recursively count solutions
      foldr (countSolutions . placeValue board row col) acc values

-- numSolutions function definition
numSolutions :: Board -> Solutions
numSolutions board =
  case countSolutions board 0 of
    0 -> NoSolution
    1 -> UniqueSolution
    _ -> MultipleSolutions

main :: IO ()
instance Show Solutions where
    show NoSolution = "NoSolution"
    show UniqueSolution = "UniqueSolution"
    show MultipleSolutions = "MultipleSolutions"


board0 :: Board
board0 = 
        [ [0,6,8,0,0,2,0,0,0]
        , [0,7,0,0,0,0,0,0,0]
        , [0,0,0,0,0,0,0,0,0]
        , [0,2,0,0,0,0,0,7,8]
        , [0,0,0,2,0,0,5,0,0]
        , [4,0,5,8,7,0,0,0,0]
        , [0,0,0,0,0,7,0,2,0]
        , [8,3,7,0,0,0,4,0,0]
        , [2,5,0,0,0,0,0,0,0]
        ]

board1 :: Board
board1 =
  [ [0,0,0,0,0,0,0,0,5]
  , [5,9,0,0,1,0,0,0,0]
  , [0,2,0,0,0,0,7,0,0]
  , [2,0,4,9,6,0,0,5,0]
  , [0,0,5,0,4,0,0,0,0]
  , [0,0,0,7,0,0,0,0,0]
  , [0,0,0,3,0,0,0,0,0]
  , [3,4,0,0,0,0,0,0,1]
  , [8,0,0,0,0,0,4,0,3]
  ]

board2 :: Board
board2 = 
  [[2,0,0,8,4,0,0,0,0]
  ,[0,0,0,0,0,0,0,4,0]
  ,[0,6,0,0,5,1,0,0,0]
  ,[0,0,5,0,0,0,8,0,4]
  ,[0,0,0,5,0,0,0,0,0]
  ,[0,0,2,0,3,8,0,0,0]
  ,[7,0,0,0,8,0,2,0,0]
  ,[0,0,1,0,0,0,0,0,6]
  ,[8,5,0,0,0,0,0,0,0]
  ]



board3 :: Board
board3 = 
  [ [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7]
  , [0,0,0,0,0,6,11,7,9,0,2,12,0,0,0,0]
  , [0,0,0,13,0,0,0,0,0,14,0,11,0,0,0,0]
  , [0,0,0,0,0,2,12,0,0,0,0,0,0,0,15,1]
  , [0,0,0,0,0,0,0,2,0,0,1,0,0,11,0,0]
  , [0,0,10,0,5,0,8,0,15,11,0,0,0,12,0,6]
  , [0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0]
  , [0,0,0,0,12,9,0,0,0,13,0,4,0,0,1,0]
  , [0,0,4,0,0,0,0,0,5,0,0,16,0,0,0,0]
  , [0,13,8,0,1,0,0,5,0,0,0,0,0,0,0,0]
  , [0,0,0,15,0,0,0,0,13,0,0,0,16,0,0,0]
  , [0,5,0,0,0,0,15,0,0,0,0,6,0,0,0,0]
  , [6,0,0,0,2,0,0,0,0,0,0,10,1,15,0,0]
  , [0,0,0,0,15,0,0,0,14,0,0,0,0,0,13,4]
  , [0,0,13,0,0,5,10,8,3,0,0,0,0,6,0,0]
  , [0,3,11,1,0,0,0,0,0,0,0,0,10,0,5,8]
  ]




board4 :: Board
board4 =
    [ [13,0,0,7,2,0,0,0,0,0,0,0,0,8,0,0]
    , [0,6,0,0,0,0,4,0,0,0,0,8,9,0,2,0]
    , [0,0,0,8,0,1,0,0,12,0,2,0,0,0,0,0]
    , [0,0,0,11,0,0,0,0,0,16,0,0,10,0,0,0]
    , [0,0,0,0,0,0,0,0,0,0,0,5,12,0,0,0]
    , [0,0,14,0,0,0,0,0,16,12,0,0,4,0,0,0]
    , [0,0,0,0,0,0,0,0,0,0,0,3,14,0,0,0]
    , [7,0,12,0,0,5,0,0,0,4,0,0,6,3,8,0]
    , [0,0,0,0,0,6,0,0,0,11,0,12,0,0,10,13]
    , [0,0,7,0,0,0,2,11,3,0,15,0,0,0,9,0]
    , [16,2,0,0,9,0,0,0,0,0,0,0,0,0,15,3]
    , [0,0,0,6,0,4,0,0,0,0,0,0,0,12,0,0]
    , [0,11,5,0,0,15,0,3,0,0,0,16,0,0,0,0]
    , [0,0,0,0,0,0,0,5,0,0,0,0,3,0,0,8]
    , [0,0,13,0,0,0,0,2,0,3,0,0,0,0,0,0]
    , [0,0,0,0,0,0,0,0,0,5,0,9,2,0,0,0]]
        
board5 :: Board
board5 = 
        [ [0,0,10,3,0,12,0,0,2,0,0,0,16,0,0,0]
        , [0,9,0,8,0,7,0,0,1,0,0,0,0,0,0,0]
        , [13,0,0,0,11,5,16,1,0,0,9,0,0,0,7,10]
        , [0,0,0,1,6,0,0,2,0,0,0,0,0,0,0,4]
        , [0,0,0,0,8,0,13,6,10,0,7,0,0,0,0,0]
        , [0,0,0,0,2,0,7,0,0,0,0,0,0,0,9,8]
        , [0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0]
        , [0,0,0,0,0,0,0,0,0,9,0,0,0,11,15,0]
        , [0,0,0,7,0,0,8,0,0,6,0,0,0,0,0,0]
        , [0,0,15,5,0,0,0,0,0,0,3,0,0,0,0,0]
        , [0,0,0,0,14,0,0,0,0,11,0,0,2,0,0,0]
        , [0,0,0,13,0,0,0,0,0,0,8,0,0,7,0,0]
        , [0,0,0,0,0,1,0,0,0,0,0,12,0,0,0,0]
        , [8,6,0,0,7,0,0,15,0,0,0,0,10,0,0,13]
        , [0,0,0,0,0,0,0,0,0,2,10,13,0,0,0,5]
        , [1,0,5,0,0,0,0,0,15,3,0,0,6,0,8,0]
        ]

board6 :: Board
board6 = 
    [ [0,11,0,0,1,19,0,16,18,10,0,25,0,0,0,0,21,0,17,0,0,0,0,0,0]
    , [0,0,0,0,25,7,0,0,0,0,0,0,0,0,15,11,24,0,1,0,10,19,0,0,0]
    , [0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,7,0,0,0]
    , [16,0,18,0,10,0,22,0,0,0,0,0,0,0,7,0,0,0,0,2,0,0,0,6,0]
    , [0,0,0,0,0,0,0,0,0,0,0,0,0,24,11,0,0,0,0,0,0,8,3,0,0]
    , [21,10,0,19,0,0,0,12,20,0,0,0,0,0,17,0,0,0,0,0,0,0,6,0,11]
    , [22,0,0,0,0,0,19,21,0,0,0,0,0,0,0,0,0,23,0,24,0,0,2,0,0]
    , [12,25,0,0,0,0,0,24,0,0,2,0,4,0,5,1,0,0,0,0,13,0,0,0,19]
    , [0,0,0,0,0,0,0,22,6,3,16,0,0,0,0,25,0,0,0,12,0,0,23,0,7]
    , [0,17,0,7,0,5,0,0,0,0,0,0,22,0,0,10,19,0,0,0,0,0,0,0,0]
    , [0,0,1,0,0,0,0,0,0,7,0,0,0,0,12,0,0,0,11,9,0,0,0,18,0]
    , [14,0,25,20,15,0,0,9,0,0,0,0,0,2,0,22,0,0,0,0,0,0,0,0,0]
    , [0,0,5,2,0,0,6,3,0,0,10,0,0,16,21,0,20,0,15,0,0,0,17,9,0]
    , [0,0,0,0,7,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,8,0,0,3,0]
    , [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,12,0,0,0]
    , [0,0,0,0,21,0,3,0,0,0,7,0,0,0,23,0,0,0,0,5,0,0,0,0,0]
    , [1,0,11,0,0,0,0,0,19,21,0,0,0,0,20,23,0,7,0,0,4,0,0,5,14]
    , [0,0,0,0,24,2,14,0,0,4,0,22,0,0,0,0,0,0,0,0,0,0,8,25,0]
    , [0,0,15,0,4,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,24,0,0,0,13]
    , [25,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,18]
    , [0,0,21,0,0,0,25,15,12,2,24,6,0,0,0,0,0,0,0,0,20,3,0,0,0]
    , [0,14,0,0,0,0,17,0,0,0,4,0,0,0,0,0,0,0,20,8,0,0,0,0,0]
    , [8,0,0,0,20,13,0,0,0,23,0,0,0,0,14,0,0,0,0,0,0,0,0,0,5]
    , [0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,11,17]
    , [0,9,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,15,0]]

board7 :: Board
board7 = 
  [[0,2,0,0,23,0,0,0,0,0,32,0,16,0,0,0,19,36,0,0,18,0,0,7,10,0,0,0,0,0,30,0,0,0,0,0]
  , [0,28,0,0,0,0,0,0,0,0,0,0,32,0,29,21,0,0,0,35,2,25,6,0,11,36,0,15,0,0,0,0,0,0,0,22]
  , [14,0,0,0,0,0,0,26,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  , [9,32,0,31,0,0,0,4,30,0,0,1,2,35,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0]
  , [13,0,26,0,7,24,15,0,0,0,0,0,8,0,0,5,0,0,0,0,0,0,0,0,0,0,0,3,0,9,0,0,0,0,0,0]
  , [0,0,0,0,0,15,35,34,0,0,0,0,0,0,0,0,0,0,0,0,0,33,14,0,0,1,0,0,0,0,0,3,0,29,0,0]
  , [0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,9,0,25,0,0,0,0,0,11,2,0,0,0,0,0,19,26,0]
  , [0,0,0,24,26,0,0,6,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,30,0,0,28,0,0,23,0,0,0,0,0]
  , [0,0,0,0,10,18,0,0,7,0,22,0,0,0,0,0,12,0,30,0,31,0,0,0,0,0,0,32,0,23,0,2,0,0,0,0]
  , [0,0,6,0,0,2,0,0,23,0,0,0,0,0,0,26,0,0,13,0,0,17,5,10,0,27,4,0,0,0,0,0,0,0,0,0]
  , [0,0,0,0,29,0,0,0,0,4,1,27,25,0,0,0,0,0,0,0,36,15,0,0,19,0,0,0,0,0,0,0,0,13,10,0]
  , [23,25,0,35,34,0,0,0,21,29,31,0,0,0,6,0,0,0,0,16,22,0,0,0,13,0,0,0,33,0,12,0,0,14,4,27]
  , [0,0,0,0,1,0,0,0,8,0,0,10,0,0,3,0,0,29,0,9,0,0,2,0,15,0,0,0,0,0,0,19,0,24,0,0]
  , [0,0,0,0,36,0,0,35,0,25,23,0,7,0,0,22,18,0,0,0,0,0,0,0,0,0,0,0,12,28,32,0,0,3,0,29]
  , [0,0,0,0,22,19,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,31,0,0,0,0,0,0,0,0,34]
  , [0,0,0,0,0,0,0,24,18,0,7,0,12,14,0,1,0,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0]
  , [0,23,35,0,25,9,30,0,0,0,0,0,0,0,15,36,16,0,24,0,7,26,0,0,17,0,0,0,0,0,0,0,0,0,0,4]
  , [0,21,0,0,0,0,0,0,0,1,0,0,0,9,0,25,0,0,0,0,20,11,16,0,0,0,0,0,0,0,8,0,0,0,0,0]
  , [26,0,0,0,0,0,0,0,11,6,15,0,0,0,7,13,0,18,0,33,0,8,0,0,12,0,0,1,0,29,0,0,0,0,0,0]
  , [0,0,0,32,0,0,0,12,29,0,0,0,0,0,0,6,0,0,20,36,0,0,26,19,0,0,0,0,0,0,4,0,0,5,0,8]
  , [0,0,0,0,0,25,31,21,0,0,35,0,0,0,0,19,26,0,0,22,17,0,0,13,0,0,0,33,0,0,29,1,0,0,0,28]
  , [0,0,0,0,30,0,0,0,4,0,27,0,0,0,21,0,0,0,0,0,15,0,0,6,0,16,19,0,0,26,0,0,0,0,0,0]
  , [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,6,0,0,0,26,0,0,20,19,0]
  , [0,0,0,0,0,0,0,0,26,0,0,0,0,33,0,0,4,0,12,1,0,28,0,0,0,0,9,0,0,0,0,25,15,0,0,0]
  , [25,0,0,9,0,0,12,0,0,0,29,0,0,0,0,15,36,0,0,0,0,0,22,0,0,0,0,0,0,0,1,0,0,0,0,14]
  , [0,0,2,0,15,23,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,28,0,30]
  , [0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,27,0,14,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0]
  , [0,0,16,0,24,0,0,0,0,0,0,0,10,0,0,0,33,0,0,0,0,14,1,0,0,0,0,0,29,31,0,21,0,0,0,0]
  , [0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,34,9,0,0,0,0,0,0,0,36,0,0,0,0,24,19]
  , [0,0,0,0,3,0,0,8,0,0,0,14,0,0,0,35,0,9,0,0,0,0,0,0,0,0,0,20,0,22,0,0,0,0,0,0]
  , [15,0,25,0,0,0,0,0,35,0,0,0,0,0,0,0,24,0,0,0,0,0,17,18,33,5,0,10,0,0,0,4,30,1,0,0]
  , [35,0,0,0,0,0,4,0,0,28,30,0,0,0,0,0,15,0,0,0,0,20,0,0,0,7,0,0,0,0,0,0,0,33,0,0]
  , [0,13,0,7,0,0,0,0,0,0,0,0,0,0,33,0,0,5,1,0,0,0,3,0,0,0,0,0,0,35,0,0,0,25,0,0]
  , [27,14,0,0,8,10,0,0,0,0,0,0,0,0,0,28,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,36,0,0]
  , [24,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,33,10,0,5,0,0,0,0,0,0,30,3,0,0,0,31,0,0]
  , [0,0,0,0,28,4,0,0,0,0,0,5,0,0,0,0,0,0,25,0,0,0,0,2,0,20,0,11,0,0,0,26,0,0,0,0]]

board10 :: Board
board10 = 
    [ [0, 15, 0,  1, 0,  2, 10, 14, 12, 0, 0, 0, 0, 0, 0, 0]
    , [0,  6, 3, 16, 12, 0,  8,  4, 14, 15, 1, 0, 2, 0, 0, 0]
    , [14, 0, 9,  7, 11, 3, 15, 0,  0, 0, 0, 0, 0, 0, 0, 0]
    , [4, 13, 2, 12, 0, 0, 0, 0,  6, 0, 0, 0, 0, 15, 0, 0]
    , [0, 0, 0,  0, 14, 1, 11, 7,  3, 5, 10, 0, 0, 8, 0, 12]
    , [3, 16, 0,  0, 2, 4, 0, 0,  0, 14, 7, 13, 0, 0, 5, 15]
    , [11, 0, 5,  0, 0, 0, 0, 0,  0, 9, 4, 0, 0, 6, 0, 0]
    , [0, 0, 0,  0, 13, 0, 16, 5, 15, 0, 0, 12, 0, 0, 0, 0]
    , [0, 0, 0,  0, 9, 0,  1, 12, 0, 8, 3, 10, 11, 0, 15, 0]
    , [2, 12, 0, 11, 0, 0, 14, 3,  5, 4, 0, 0, 0, 0, 9, 0]
    , [6, 3, 0,  4, 0, 0, 13, 0,  0, 11, 9, 1, 0, 12, 16, 2]
    , [0, 0, 10, 9, 0, 0, 0, 0,  0, 0, 12, 0, 8, 0, 6, 7]
    , [12, 8, 0, 0, 16, 0, 0, 10, 0, 13, 0, 0, 0, 5, 0, 0]
    , [5, 0, 0, 0, 3, 0, 4, 6,  0, 1, 15, 0, 0, 0, 0, 0]
    , [0, 9, 1, 6, 0, 14, 0, 11, 0, 0, 2, 0, 0, 0, 10, 8]
    , [0, 14, 0, 0, 0, 13, 9, 0,  4, 12, 11, 8, 0, 0, 2, 0]
    ]






main = do
  let puzzle = 
        [ [5, 3, 0, 0, 7, 0, 0, 0, 0]
        , [6, 0, 0, 1, 9, 5, 0, 0, 0]
        , [0, 9, 8, 0, 0, 0, 0, 6, 0]
        , [8, 0, 0, 0, 6, 0, 0, 0, 3]
        , [4, 0, 0, 8, 0, 3, 0, 0, 1]
        , [7, 0, 0, 0, 2, 0, 0, 0, 6]
        , [0, 6, 0, 0, 0, 0, 2, 8, 0]
        , [0, 0, 0, 4, 1, 9, 0, 0, 5]
        , [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ]

  let puzzle2 = 
        [ [0,6,8,0,0,2,0,0,0]
        , [0,7,0,0,0,0,0,0,0]
        , [0,0,0,0,0,0,0,0,0]
        , [0,2,0,0,0,0,0,7,8]
        , [0,0,0,2,0,0,5,0,0]
        , [4,0,5,8,7,0,0,0,0]
        , [0,0,0,0,0,7,0,2,0]
        , [8,3,7,0,0,0,4,0,0]
        , [2,5,0,0,0,0,0,0,0]
        ]

  let result = numSolutions puzzle2
  putStrLn $ "The result is: " ++ show result